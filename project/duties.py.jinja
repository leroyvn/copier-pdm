"""Development tasks."""

import os
from pathlib import Path

from duty import duty

PY_SRC_PATHS = (Path(_) for _ in ("src", "tests", "duties.py", "docs"))
PY_SRC_LIST = tuple(str(_) for _ in PY_SRC_PATHS)
PY_SRC = " ".join(PY_SRC_LIST)
TESTING = os.environ.get("TESTING", "0") in {"1", "true"}
CI = os.environ.get("CI", "0") in {"1", "true", "yes", ""}
WINDOWS = os.name == "nt"
PTY = not WINDOWS and not CI


@duty(silent=True)
def clean(ctx):
    """
    Delete temporary files.

    Arguments:
        ctx: The context instance (passed automatically).
    """
    ctx.run("rm -rf .coverage*")
    ctx.run("rm -rf .pytest_cache")
    ctx.run("rm -rf tests/.pytest_cache")
    ctx.run("rm -rf dist")
    ctx.run("rm -rf htmlcov")
    ctx.run("find . -type d -name __pycache__ | xargs rm -rf")
    ctx.run("rm -rf docs/src/generated/autosummary")


@duty
def docs(ctx):
    """
    Build the documentation locally.

    Arguments:
        ctx: The context instance (passed automatically).
    """
    ctx.run(
        "sphinx-build -b html docs build/html",
        title="Building documentation",
        capture=False,
    )


@duty
def docs_serve(ctx):
    """
    Serve the documentation (localhost:8000).

    Arguments:
        ctx: The context instance (passed automatically).
    """
    ctx.run(
        "sphinx-autobuild -b html docs build/html",
        title="Serving documentation",
        capture=False,
    )


@duty
def format(ctx):
    """
    Run formatting tools on the code.

    Arguments:
        ctx: The context instance (passed automatically).
    """
    ctx.run(
        f"autoflake -ir --remove-all-unused-imports {PY_SRC}",
        title="Removing unused imports",
        pty=PTY,
    )
    ctx.run(f"isort {PY_SRC}", title="Ordering imports", pty=PTY)
    ctx.run(f"black {PY_SRC}", title="Formatting code", pty=PTY)


@duty(silent=True)
def coverage(ctx):
    """
    Report coverage as text and HTML.

    Arguments:
        ctx: The context instance (passed automatically).
    """
    ctx.run("coverage combine", nofail=True)
    ctx.run("coverage report --rcfile=config/coverage.ini", capture=False)
    ctx.run("coverage html --rcfile=config/coverage.ini")


@duty
def test(ctx, pytest_args: str = ""):
    """
    Run the test suite using PEP 582.

    Arguments:
        ctx: The context instance (passed automatically).
        pytest_args: Arguments forwarded to the pytest command.
    """
    args = ["--"] + pytest_args.split(" ") if pytest_args else []

    ctx.run(
        ["nox", "--no-venv", "-s", "test", *args],
        title="Running tests",
        pty=PTY,
        capture=False,
    )


@duty
def nox_test(ctx, nox_args: str = "", pytest_args: str = ""):
    """
    Run the test suite using PEP 582.

    Arguments:
        ctx: The context instance (passed automatically).
        pytest_args: Arguments forwarded to the pytest command.
    """
    args = ["--"] + pytest_args.split(" ") if pytest_args else []

    ctx.run(
        ["nox", "-s", "test", *args],
        title="Running tests",
        pty=PTY,
        capture=False,
    )
